/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.luence.app;

import org.apache.lucene.analysis.standard.StandardAnalyzer;
import org.apache.lucene.document.Document;
import org.apache.lucene.document.Field;
import org.apache.lucene.index.*;
import org.apache.lucene.document.TextField;
import org.apache.lucene.queryparser.classic.ParseException;
import org.apache.lucene.queryparser.classic.QueryParser;
import org.apache.lucene.search.*;
import org.apache.lucene.search.similarities.*;
import org.apache.lucene.store.ByteBuffersDirectory;
import org.apache.lucene.store.Directory;

import java.lang.Math;
import java.io.FileWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;
import java.io.IOException;



public class App {

    //private static CustomSimilarity mysim = new CustomSimilarity();
    public static String keyTerms(String query){
        query = query.replaceAll("\\\\s+", " ");
        query = query.toLowerCase();
        String elm[] = query.split(" ");
        query = "";
        int index = 0;

        for(String word: elm) {
            if(index >= 2) {
            query = query + " \"" + elm[index -2] + " " + elm[index -1] + " " + elm[index] + "\"";
            query = query + " "  + elm[index -2]  + " " + elm[index -1] + " " + elm[index];
            }

            ++index;
        }

        return query;

    }
    public static String reomveStopWords(String stringToEdit) {
        //  treated advanced
        //System.out.println(stringToEdit);
        stringToEdit = stringToEdit.replaceAll("\\\\s+", " ");
        stringToEdit = " " + stringToEdit;
        stringToEdit = stringToEdit.toLowerCase();
        stringToEdit = stringToEdit.replaceAll(" associated ", " ");
        stringToEdit = stringToEdit.replaceAll(" cause ", " ");
        stringToEdit = stringToEdit.replaceAll(" with ", " ");
        stringToEdit = stringToEdit.replaceAll(" a ", " ");
        stringToEdit = stringToEdit.replaceAll(" have ", " ");
        stringToEdit = stringToEdit.replaceAll(" delayed ", " ");
        stringToEdit = stringToEdit.replaceAll(" where ", " ");
        stringToEdit = stringToEdit.replaceAll(" catamenorrheal ", " ");
        stringToEdit = stringToEdit.replaceAll(" as ", " ");
        stringToEdit = stringToEdit.replaceAll(" option ", " ");
        stringToEdit = stringToEdit.replaceAll(" are ", " ");
        stringToEdit = stringToEdit.replaceAll(" of ", " ");
        stringToEdit = stringToEdit.replaceAll(" the ", " ");
        stringToEdit = stringToEdit.replaceAll(" and ", " ");
        stringToEdit = stringToEdit.replaceAll(" yo ", "" );
        stringToEdit = stringToEdit.replaceAll(" while ", " ");
        stringToEdit = stringToEdit.replaceAll(" on ", " ");

        stringToEdit = stringToEdit.replaceAll(" to ", " ");
        stringToEdit = stringToEdit.replaceAll(" best ", " ");
        stringToEdit = stringToEdit.replaceAll(" control ", " ");
        stringToEdit = stringToEdit.replaceAll(" in ", " ");
        stringToEdit = stringToEdit.replaceAll(" secondary ", " ");
        stringToEdit = stringToEdit.replaceAll(" never ", " ");

        stringToEdit = stringToEdit.replaceAll(" whether ", " ");
        stringToEdit = stringToEdit.replaceAll(" recommended ", " ");
        stringToEdit = stringToEdit.replaceAll(" frequency ", " ");
        stringToEdit = stringToEdit.replaceAll(" is ", " ");
        stringToEdit = stringToEdit.replaceAll(" information ", " ");
        stringToEdit = stringToEdit.replaceAll(" about ", " ");

        stringToEdit = stringToEdit.replaceAll(" how ", " ");
        stringToEdit = stringToEdit.replaceAll(" which ", " ");
        stringToEdit = stringToEdit.replaceAll(" for ", " ");
        stringToEdit = stringToEdit.replaceAll(" vs. ", " ");
        stringToEdit = stringToEdit.replaceAll("-", " ");
        stringToEdit = stringToEdit.replaceAll(" management ", " ");

        stringToEdit = stringToEdit.replaceAll(" long ", " ");
        stringToEdit = stringToEdit.replaceAll(" term ", " ");
        stringToEdit = stringToEdit.replaceAll(" repeated ", " ");
        stringToEdit = stringToEdit.replaceAll(" use ", " ");
        stringToEdit = stringToEdit.replaceAll(" any ", " ");
        stringToEdit = stringToEdit.replaceAll(" standard ", " ");

        stringToEdit = stringToEdit.replaceAll(" criteria ", " ");
        stringToEdit = stringToEdit.replaceAll(" with ", " ");
        stringToEdit = stringToEdit.replaceAll(" older ", " ");
        stringToEdit = stringToEdit.replaceAll(" or ", " ");
        stringToEdit = stringToEdit.replaceAll(" after ", " ");
        stringToEdit = stringToEdit.replaceAll(" at ", " ");

        stringToEdit = stringToEdit.replaceAll(" are ", " ");
        stringToEdit = stringToEdit.replaceAll(" there ", " ");
        stringToEdit = stringToEdit.replaceAll(" adverse ", " ");
        stringToEdit = stringToEdit.replaceAll(" effects ", " ");
        stringToEdit = stringToEdit.replaceAll(" when ", " ");
        stringToEdit = stringToEdit.replaceAll(" given ", " ");

        stringToEdit = stringToEdit.replaceAll(" year ", " ");
        stringToEdit = stringToEdit.replaceAll(" old ", " ");
        stringToEdit = stringToEdit.replaceAll(" adult ", " ");
        stringToEdit = stringToEdit.replaceAll(" isolated ", " ");
        stringToEdit = stringToEdit.replaceAll(" review ", " ");
        stringToEdit = stringToEdit.replaceAll(" article ", " ");
        stringToEdit = stringToEdit.replaceAll(" risk ", " ");
        stringToEdit = stringToEdit.replaceAll(" factors ", " ");

        stringToEdit = stringToEdit.replaceAll(" treatment ", " ");
        stringToEdit = stringToEdit.replaceAll(" can ", " ");
        stringToEdit = stringToEdit.replaceAll(" which ", " ");
        stringToEdit = stringToEdit.replaceAll(" isolated ", " ");
        stringToEdit = stringToEdit.replaceAll(" course ", " ");
        stringToEdit = stringToEdit.replaceAll(" work ", " ");

        stringToEdit = stringToEdit.replaceAll(" up ", " ");
        stringToEdit = stringToEdit.replaceAll(" diagnostic ", " ");
        stringToEdit = stringToEdit.replaceAll(" diagnosis ", " ");

        stringToEdit = stringToEdit.replaceAll(" therapeutic ", " ");
        stringToEdit = stringToEdit.replaceAll(" evaluation ", " ");
        stringToEdit = stringToEdit.replaceAll(" complications ", " ");
        stringToEdit = stringToEdit.replaceAll(" prevention ", " ");
        stringToEdit = stringToEdit.replaceAll(" chronic ", " ");
        stringToEdit = stringToEdit.replaceAll(" risk ", " ");

        stringToEdit = stringToEdit.replaceAll(" success ", " ");
        stringToEdit = stringToEdit.replaceAll(" induced ", " ");
        stringToEdit = stringToEdit.replaceAll(" without ", " ");

        stringToEdit = stringToEdit.replaceAll(" are ", " ");
        stringToEdit = stringToEdit.replaceAll(" does ", " ");
        stringToEdit = stringToEdit.replaceAll(" review ", " ");
        stringToEdit = stringToEdit.replaceAll(" risk ", " ");
        stringToEdit = stringToEdit.replaceAll(" can ", " ");
        stringToEdit = stringToEdit.replaceAll(" which ", " ");
        stringToEdit = stringToEdit.replaceAll(" differential ", " ");
        stringToEdit = stringToEdit.replaceAll(" indications ", " ");
        stringToEdit = stringToEdit.replaceAll(" course ", " ");
        stringToEdit = stringToEdit.replaceAll(" diagnostic ", " ");
        stringToEdit = stringToEdit.replaceAll(" evaluation ", " ");
        stringToEdit = stringToEdit.replaceAll(" treatment ", " ");
        stringToEdit = stringToEdit.replaceAll(" prevention ", " ");
        stringToEdit = stringToEdit.replaceAll(" outpatient ", " ");
        stringToEdit = stringToEdit.replaceAll(" radiation ", " ");
        stringToEdit = stringToEdit.replaceAll(" infections ", " ");
        stringToEdit = stringToEdit.replaceAll(" surgery ", " ");
        stringToEdit = stringToEdit.replaceAll(" how ", " ");
        stringToEdit = stringToEdit.replaceAll(" differntial ", " ");
        stringToEdit = stringToEdit.replaceAll(" review ", " ");


        stringToEdit = stringToEdit.replaceAll(",", " ");
        stringToEdit = stringToEdit.replaceAll(";", " ");
        stringToEdit = stringToEdit.replaceAll("/", " ");
        stringToEdit = stringToEdit.replaceAll("\\(", "");
        stringToEdit = stringToEdit.replaceAll("\\)", "");
        stringToEdit = stringToEdit.replaceAll(":", " ");
        stringToEdit = stringToEdit.replaceAll("-", " ");
        stringToEdit = stringToEdit.replaceAll("\\.", "");
        stringToEdit = stringToEdit.replaceAll("\\*", "");
        stringToEdit = stringToEdit.replaceAll("\\?", "");
        stringToEdit = stringToEdit.replaceAll("1", "");
        stringToEdit = stringToEdit.replaceAll("2", "");
        stringToEdit = stringToEdit.replaceAll("3", "");
        stringToEdit = stringToEdit.replaceAll("4", "");
        stringToEdit = stringToEdit.replaceAll("5", "");
        stringToEdit = stringToEdit.replaceAll("6", "");
        stringToEdit = stringToEdit.replaceAll("7", "");
        stringToEdit = stringToEdit.replaceAll("8", "");
        stringToEdit = stringToEdit.replaceAll("9", "");
        stringToEdit = stringToEdit.replaceAll("0", "");

        return stringToEdit;
    }
    private static void addDoc(IndexWriter w, String title, String I, String W, String M, String S) throws IOException {
        Document doc = new Document();
        doc.add(new TextField("title", title, Field.Store.YES));
        doc.add(new TextField("I", I, Field.Store.YES));
        //Text field is tokens
        doc.add(new TextField("W", W, Field.Store.YES));
        doc.add(new TextField("M", M, Field.Store.YES));
        doc.add(new TextField("S", S, Field.Store.YES));
        w.addDocument(doc);
    }

    static Directory index(StandardAnalyzer analyzer)  throws IOException {
        Directory index = new ByteBuffersDirectory();

        IndexWriterConfig config = new IndexWriterConfig(analyzer);

        //Parsing Data

        //Have token field of key terms
        //Have title field, and more
        int count = 0;
        try (IndexWriter w = new IndexWriter(index, config)) {
        try {
            File f = new File("ohsumed.88-91");
            Scanner r = new Scanner(f);
            String title = "";
            String M = "";
            String W = "";
            String S = "";
            String I = "";
            int first = 1;
            while (r.hasNextLine()) {
                String data = r.nextLine();
                if (data.contains(".T")) {
                    if (first == 1){
                        first = 0;
                    }
                    else addDoc(w, title, I, W, M, S);
                    //New Doc
                    data = r.nextLine();//Get description
                    title = data;
                    I = "";
                    W = "";
                    M = "";
                    S = "";
                } if (data.contains(".M")) {
                    data = r.nextLine();//Get description
                    data = reomveStopWords(data);
                    M = data;
                }if (data.contains(".S")) {
                    data = r.nextLine();//Get description
                    data = reomveStopWords(data);
                    S = data;
                } if (data.contains(".W")) {
                    data = r.nextLine();//Get description
                    data = reomveStopWords(data);
                    W = data;
                    ++count;

                } if (data.contains(".U")) {
                    data = r.nextLine();//Get description
                    I = data;
                }

            }

            addDoc(w, title, I, W, M, S);
            r.close();
        } catch (FileNotFoundException e) {
            System.out.println("File Error");
            e.printStackTrace();
        }

        }
        return index;
    }



    public static void main(String[] args) throws IOException, ParseException {

        StandardAnalyzer analyzer = new StandardAnalyzer();
        Directory index = index(analyzer);

        //Parsing Query

        try {
            File f = new File("query.ohsu.1-63");
            Scanner r = new Scanner(f);
            String data = "";
            String num = "";
            String title = "";
            try {
                File createfile = new File("log.txt");
                if (createfile.createNewFile()) {
                    System.out.println("File created: " + createfile.getName());
                } else {
                    System.out.println("File already exists.");
                }
                createfile = new File("log1.txt");
                if (createfile.createNewFile()) {
                    System.out.println("File created: " + createfile.getName());
                } else {
                    System.out.println("File already exists.");
                }
                createfile = new File("log2.txt");
                if (createfile.createNewFile()) {
                    System.out.println("File created: " + createfile.getName());
                } else {
                    System.out.println("File already exists.");
                }
                createfile = new File("log3.txt");
                if (createfile.createNewFile()) {
                    System.out.println("File created: " + createfile.getName());
                } else {
                    System.out.println("File already exists.");
                }
                createfile = new File("log4.txt");
                if (createfile.createNewFile()) {
                    System.out.println("File created: " + createfile.getName());
                } else {
                    System.out.println("File already exists.");
                }
            } catch (IOException e) {
                System.out.println("An error occurred.");
                e.printStackTrace();
                return;
            }
            FileWriter myWriter = new FileWriter("log.txt");
            FileWriter myWriter1 = new FileWriter("log1.txt");
            FileWriter myWriter2 = new FileWriter("log2.txt");
            FileWriter myWriter3 = new FileWriter("log3.txt");
            FileWriter myWriter4 = new FileWriter("log5.txt");

            while (r.hasNextLine()) {
                data = r.nextLine();
                if (data.contains("<top>")) {

                } else if (data.contains("<num>")) {
                    data = data.replaceAll("<num> Number: ", "");
                    num = data;

                } else if (data.contains("<title>")) {
                    data = data.replaceAll("<title> ", "");
                    data = reomveStopWords(data);
                    title = data;

                }else if (data.contains("<desc>")) {
                    data = r.nextLine();//Get description
                    data = reomveStopWords(data);
                    if (title.charAt(0)==' '){
                        title = title.substring(1);
                    }
                    String querystr;
                    if (data.charAt(data.length() - 1)==' '){
                        querystr = data + title;
                    }else{
                        querystr = data + " " + title;
                    }

                    if (querystr.charAt(0)==' '){
                            querystr = querystr.substring(1);
                        }


                    querystr = querystr + "~";
                    querystr = querystr.replaceAll(" ", "~ ");

                    querystr = querystr.replaceAll(" ~", "");

                    //have keywords function group together " "
                    String kquerystr = querystr;

                    System.out.println(querystr);


                    QueryParser q = new QueryParser("<default field>", analyzer);

                    String special = "W:" + querystr + " OR title:" + querystr + " OR S:" + querystr + " OR M:" + querystr;

                    int hitsPerPage = 50;
                    String rankType;
                    for (int iter = 0; iter!=4 ; ++iter) {

                        IndexReader reader = DirectoryReader.open(index);
                        IndexSearcher searcher = new IndexSearcher(reader);

                        if(iter==0) {
                                searcher.setSimilarity(new TFIDFSimilarity() {
                                    @Override
                                    public float tf(float freq) {
                                        return (float) Math.sqrt(freq);
                                    }

                                    @Override
                                    public float idf(long docFreq, long docCount) {
                                        return 1;
                                    }

                                    @Override
                                    public float lengthNorm(int length) {
                                        return (float) (1 / Math.sqrt(length));
                                    }
                                }); //Change ranking alg
                            rankType = "TFSimilarity";
                        } else if (iter==1) {
                            searcher.setSimilarity(new BooleanSimilarity());
                            rankType = "BooleanSimilarity";
                        }else if (iter==2) {

                            searcher.setSimilarity(new ClassicSimilarity());
                            rankType = "TFIDFSimilarity";
                        }else if (iter==3) {

                            searcher.setSimilarity(new BM25Similarity());
                            rankType = "BM25Similarity";
                        }else{
                            searcher.setSimilarity(new TFIDFSimilarity() {
                                @Override
                                public float tf(float freq) {
                                    return 1;
                                }

                                @Override
                                public float idf(long docFreq, long docCount) {
                                    return docFreq*docCount;
                                }

                                @Override
                                public float lengthNorm(int length) {
                                    return (float) (1 / Math.sqrt(length));
                                }
                            });
                            //searcher.setSimilarity(new ClassicSimilarity());
                            rankType = "MySimilarity";
                        }
                        //searcher.setDefaultFieldSortScoring(true, true);
                        TopDocs docs = searcher.search(q.parse(special), hitsPerPage);
                        ScoreDoc[] hits = docs.scoreDocs;

                        //If no hit change query to be less specific
                        if (hits.length == 0) {
                            querystr = kquerystr;
                            q = new QueryParser("<default field>", analyzer);
                            special = "W:" + querystr + " OR title:" + querystr + " OR S:" + querystr + " OR M:" + querystr;

                            reader = DirectoryReader.open(index);
                            searcher = new IndexSearcher(reader);
                            docs = searcher.search(q.parse(special), hitsPerPage);
                            hits = docs.scoreDocs;
                        }

                        System.out.println("Found " + hits.length + " hits.");
                        for (int i = 0; i < hits.length; ++i) {
                            int docId = hits[i].doc;
                            Document d = searcher.getIndexReader().document(docId);

                            System.out.println((i + 1) + ". " + d.get("title") + hits[i].score);
                            if(rankType.equals("TFIDFSimilarity")) {

                                myWriter.write(num + " Q0 " + d.get("I") + " " + (i + 1) + " " + hits[i].score + " " + rankType + "\n");

                            }else if(rankType.equals("BooleanSimilarity")){

                                myWriter1.write(num + " Q0 " + d.get("I") + " " + (i + 1) + " " + hits[i].score + " " + rankType + "\n");

                            }else if(rankType.equals("TFSimilarity")){

                                myWriter2.write(num + " Q0 " + d.get("I") + " " + (i + 1) + " " + hits[i].score + " " + rankType + "\n");

                            }else if(rankType.equals("MySimilarity")){

                                myWriter3.write(num + " Q0 " + d.get("I") + " " + (i + 1) + " " + hits[i].score + " " + rankType + "\n");

                            }else{
                                myWriter4.write(num + " Q0 " + d.get("I") + " " + (i + 1) + " " + hits[i].score + " " + rankType + "\n");
                            }
                        }
                    }

                    data = r.nextLine();
                }
            }
            r.close();
            myWriter.close();
            myWriter1.close();
            myWriter2.close();
            myWriter3.close();
        } catch (FileNotFoundException e) {
            System.out.println("File Error");
            e.printStackTrace();
        }

    }
}
